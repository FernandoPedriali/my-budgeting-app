# ===== BUILD SYSTEM =====
[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

# ===== PROJECT METADATA =====
[project]
name = "my-budgeting-app"
version = "0.1.0"
description = "Aplicação de gerenciamento de orçamento pessoal"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [{ name = "Fernando", email = "seu.email@exemplo.com" }]
keywords = ["budget", "finance", "nicegui"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

# Dependências principais
dependencies = ["nicegui>=1.4.0"]

# Dependências opcionais por grupo
[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "pylint>=3.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
]
test = ["pytest>=7.4.0", "pytest-cov>=4.1.0", "pytest-asyncio>=0.21.0"]

[project.urls]
Homepage = "https://github.com/seu-usuario/my-budgeting-app"
Repository = "https://github.com/seu-usuario/my-budgeting-app"
"Bug Tracker" = "https://github.com/seu-usuario/my-budgeting-app/issues"

# ===== BLACK (Formatador) =====
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | build
  | dist
)/
'''

# ===== ISORT (Organizar imports) =====
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [".venv", "venv", "__pycache__", "build", "dist"]

# ===== PYLINT =====
[tool.pylint.main]
# Limita a 4 processos paralelos
jobs = 4
# Extensões de arquivo para checar
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.messages_control]
# Desabilita warnings específicos
disable = [
    "C0111", # missing-docstring
    "C0103", # invalid-name (para variáveis como 'id', 'x', 'y')
    "R0903", # too-few-public-methods
    "W0212", # protected-access
]

[tool.pylint.format]
max-line-length = 120
indent-string = "    "

[tool.pylint.basic]
# Permite nomes de variáveis curtos comuns
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db", "e", "x", "y", "z"]

[tool.pylint.design]
max-args = 7
max-attributes = 10
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 25
max-returns = 6
max-statements = 60
min-public-methods = 1

# ===== PYTEST =====
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--strict-config",
    "--cov=frontend_nicegui",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
]
markers = [
    "slow: marca testes como lentos",
    "integration: marca testes de integração",
    "unit: marca testes unitários",
]

# ===== COVERAGE =====
[tool.coverage.run]
source = ["frontend_nicegui"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# ===== MYPY (Type Checking) =====
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

# Diretórios a ignorar
exclude = ["venv", ".venv", "build", "dist"]

# ===== SETUPTOOLS =====
[tool.setuptools]
package-dir = { "" = "frontend_nicegui" }

[tool.setuptools.packages.find]
where = ["frontend_nicegui"]
include = ["app*", "shared*", "features*"]
exclude = ["tests*", "docs*"]
